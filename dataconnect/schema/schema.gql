# # Example schema for simple movie review app

# # User table is keyed by Firebase Auth UID.
# type User @table {
#   # `@default(expr: "auth.uid")` sets it to Firebase Auth UID during insert and upsert.
#   id: String! @default(expr: "auth.uid")
#   username: String! @col(dataType: "varchar(50)")
#   # The `user: User!` field in the Review table generates the following one-to-many query field.
#   #  reviews_on_user: [Review!]!
#   # The `Review` join table the following many-to-many query field.
#   #  movies_via_Review: [Movie!]!
# }

# # Movie is keyed by a randomly generated UUID.
# type Movie @table {
#   # If you do not pass a 'key' to `@table`, Data Connect automatically adds the following 'id' column.
#   # Feel free to uncomment and customize it.
#   #  id: UUID! @default(expr: "uuidV4()")
#   title: String!
#   imageUrl: String!
#   genre: String
# }

# # MovieMetadata is a metadata attached to a Movie.
# # Movie <-> MovieMetadata is a one-to-one relationship
# type MovieMetadata @table {
#   # @unique ensures each Movie can only one MovieMetadata.
#   movie: Movie! @unique
#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  movieId: UUID!
#   rating: Float
#   releaseYear: Int
#   description: String
# }

# # Reviews is a join table between User and Movie.
# # It has a composite primary keys `userUid` and `movieId`.
# # A user can leave reviews for many movies. A movie can have reviews from many users.
# # User  <-> Review is a one-to-many relationship
# # Movie <-> Review is a one-to-many relationship
# # Movie <-> User is a many-to-many relationship
# type Review @table(name: "Reviews", key: ["movie", "user"]) {
#   user: User!
#   # The user field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  userUid: String!
#   movie: Movie!
#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.
#   #  movieId: UUID!
#   rating: Int
#   reviewText: String
#   reviewDate: Date! @default(expr: "request.time")
# }

# Powerise Website Schema
# User management for admin and customer authentication

type User @table {
  id: String! @default(expr: "auth.uid")
  email: String! @col(dataType: "varchar(100)")
  displayName: String @col(dataType: "varchar(100)")
  role: UserRole! @default(value: "USER")
  isActive: Boolean! @default(value: true)
  createdAt: Date! @default(expr: "request.time")
  updatedAt: Date! @default(expr: "request.time")
}

enum UserRole {
  ADMIN
  USER
}

# News/Blog articles management
type News @table {
  id: UUID! @default(expr: "uuidV4()")
  title: String! @col(dataType: "varchar(200)")
  slug: String! @unique @col(dataType: "varchar(250)")
  content: String! @col(dataType: "text")
  excerpt: String @col(dataType: "varchar(500)")
  featuredImage: String @col(dataType: "varchar(500)")
  category: NewsCategory!
  status: ContentStatus! @default(value: "DRAFT")
  publishedAt: Date
  createdAt: Date! @default(expr: "request.time")
  updatedAt: Date! @default(expr: "request.time")
  authorId: String!
  author: User!
  tags: String @col(dataType: "varchar(500)") # JSON array as string
  metaTitle: String @col(dataType: "varchar(200)")
  metaDescription: String @col(dataType: "varchar(300)")
  views: Int! @default(value: 0)
}

enum NewsCategory {
  ENERGY
  INFRASTRUCTURE
  ENVIRONMENT
  CONSULTING
  COMPANY
  GENERAL
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

# Static pages management
type Page @table {
  id: UUID! @default(expr: "uuidV4()")
  title: String! @col(dataType: "varchar(200)")
  slug: String! @unique @col(dataType: "varchar(250)")
  content: String! @col(dataType: "text")
  metaTitle: String @col(dataType: "varchar(200)")
  metaDescription: String @col(dataType: "varchar(300)")
  status: ContentStatus! @default(value: "DRAFT")
  template: PageTemplate! @default(value: "STANDARD")
  createdAt: Date! @default(expr: "request.time")
  updatedAt: Date! @default(expr: "request.time")
  authorId: String!
  author: User!
}

enum PageTemplate {
  STANDARD
  LANDING
  SERVICES
  ABOUT
}

# Contact/Inquiry management
type Inquiry @table {
  id: UUID! @default(expr: "uuidV4()")
  name: String! @col(dataType: "varchar(100)")
  email: String! @col(dataType: "varchar(100)")
  company: String @col(dataType: "varchar(200)")
  phone: String @col(dataType: "varchar(20)")
  subject: String! @col(dataType: "varchar(200)")
  message: String! @col(dataType: "text")
  category: InquiryCategory!
  status: InquiryStatus! @default(value: "NEW")
  priority: InquiryPriority! @default(value: "MEDIUM")
  assignedToId: String
  assignedTo: User
  respondedAt: Date
  createdAt: Date! @default(expr: "request.time")
  updatedAt: Date! @default(expr: "request.time")
  adminNotes: String @col(dataType: "text")
}

enum InquiryCategory {
  ENERGY_SERVICES
  INFRASTRUCTURE_SERVICES
  ENVIRONMENT_CONSULTING
  GENERAL_INQUIRY
  PARTNERSHIP
  SUPPORT
}

enum InquiryStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  RESOLVED
  CLOSED
}

enum InquiryPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

# Site configuration
type SiteConfig @table {
  id: UUID! @default(expr: "uuidV4()")
  key: String! @unique @col(dataType: "varchar(100)")
  value: String! @col(dataType: "text")
  description: String @col(dataType: "varchar(300)")
  category: String! @col(dataType: "varchar(50)")
  isPublic: Boolean! @default(value: false)
  updatedAt: Date! @default(expr: "request.time")
  updatedById: String!
  updatedBy: User!
}

# Analytics tracking
type Analytics @table {
  id: UUID! @default(expr: "uuidV4()")
  page: String! @col(dataType: "varchar(300)")
  userAgent: String @col(dataType: "text")
  ipAddress: String @col(dataType: "varchar(45)")
  referrer: String @col(dataType: "varchar(500)")
  sessionId: String @col(dataType: "varchar(100)")
  timestamp: Date! @default(expr: "request.time")
}
